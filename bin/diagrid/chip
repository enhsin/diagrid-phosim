#!/usr/bin/env python

import sys, os, subprocess, shutil

def runProgram(command, binDir=None, argstring=None):
    myCommand = command
    if binDir is not None:
        myCommand = os.path.join(binDir, command)
    if argstring is not None:
        myCommand += argstring
    if subprocess.call(myCommand, shell=True) != 0:
        raise RuntimeError("Error running %s" % myCommand)

def posttrim(argv):
    obsid=argv[2]
    tc=argv[3]
    nexp=int(float(argv[4]))
    dataDir=argv[5] 
    checkpoint=int(float(argv[7]))

    chipID=[]
    for line in open('trim_'+obsid+'_'+tc+'.pars'):
        if "chipid" in line:
            chipID.append(line.split()[2])

    for cid in chipID:
        if os.path.getsize('trimcatalog_'+obsid+'_'+cid+'.pars')>0:
            seds=[]
            for line in open('trimcatalog_'+obsid+'_'+cid+'.pars'):
                if "SED" in line or "sky" in line:
                   seds.append(line.split()[5])
            uniqseds=list(set(seds))
            for ex in range(nexp):
                eid="E%03d" % (ex)
                fid=obsid+'_'+cid+'_'+eid
                for ckpt in range(checkpoint+1):
                    fidckpt=fid+'_'+str(ckpt)
                    if os.path.exists('raytrace_'+fidckpt+'.submit'): 
                        submitfile=open('raytrace_'+fidckpt+'.submit','a')  
                        if len(seds)>0: 
                            submitfile.write(',\ \n')   
                            for s in uniqseds:
                                if s==uniqseds[-1]:
                                    submitfile.write('%s/SEDs/%s \n' % (dataDir,s))    
                                else:
                                    submitfile.write('%s/SEDs/%s, \ \n' % (dataDir,s))    
                            pfile=open('raytrace_'+fidckpt+'.pars','a')
                            pfile.write(open('trimcatalog_'+obsid+'_'+cid+'.pars').read())
                            pfile.close()
                        else:
                            submitfile.write('\n')   
                        submitfile.write('Queue 1\n') 
                        submitfile.close()  
            os.remove('trimcatalog_'+obsid+'_'+cid+'.pars')              
 

def postraytrace(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    outputDir=argv[6]
    workDir=argv[7]

    eImage=workDir+'/lsst_e_'+observationID+'_'+cid+'_'+eid+'.fits.gz' 
    eImageRename=outputDir+'/lsst_e_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.fits.gz'
    if os.path.exists(eImage):
        shutil.move(eImage,eImageRename)
 
 
def poste2adc(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    outputDir=argv[6]
    instrDir=argv[7]
    workDir=argv[8]

    os.chdir(workDir)
    tarFiles=''
    segfile=os.path.join(instrDir,'segmentation.txt')
    for line in open(segfile):
        aid=line.split()[0]
        if cid in line and aid != cid:
            rawImage='lsst_a_'+observationID+'_'+aid+'_'+eid+'.fits.gz'
            rawImageRename=outputDir+'/lsst_a_'+observationID+'_f'+filt+'_'+aid+'_'+eid+'.fits.gz'
            shutil.move(rawImage,rawImageRename)
            tarFiles+=rawImageRename.split('/')[-1]+' '

    eImage='lsst_e_'+observationID+'_'+cid+'_'+eid+'.fits.gz'
    eImageRename=outputDir+'/lsst_e_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.fits.gz'
    shutil.move(eImage,eImageRename)
    tarFiles+=(eImageRename.split('/')[-1])

    os.chdir(outputDir)
    tar='lsst_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.tar'
    runProgram('tar cf '+tar+' '+tarFiles+' --remove-files')


function=sys.argv[1]
try:
    exec(function+'(sys.argv)')
except:
    raise RuntimeError('Invalid command %s ' % function)

