#!/usr/bin/env python

import sys, os, subprocess, shutil
import tarfile, glob

def runProgram(command, binDir=None, argstring=None):
    myCommand = command
    if binDir is not None:
        myCommand = os.path.join(binDir, command)
    if argstring is not None:
        myCommand += argstring
    if subprocess.call(myCommand, shell=True) != 0:
        raise RuntimeError("Error running %s" % myCommand)

def cleanupScreens(observationID,workDir):
    subs=glob.glob(workDir+'/'+'raytrace_'+observationID+'_*')
    if len(subs)==0:
        files=['objectcatalog_'+observationID+'.pars','tracking_'+observationID+'.pars','raytrace_'+observationID+'.tar']
        for f in files:
            if os.path.exists(workDir+'/'+f):
                os.remove(workDir+'/'+f)

def posttrim(argv):
    obsid=argv[2]
    tc=argv[3]
    nexp=int(float(argv[4]))
    sedDir=argv[5]
    checkpoint=int(float(argv[6]))
    workDir=argv[7]
    scratchDir=os.path.join(os.getcwd(),'../scratch')

    os.chdir(scratchkDir)
    chipID=[]
    for line in open('trim_'+obsid+'_'+tc+'.pars'):
        if "chipid" in line:
            chipID.append(line.split()[2])

    for cid in chipID:
        if os.path.exists('trimcatalog_'+obsid+'_'+cid+'.pars'):
            if os.path.getsize('trimcatalog_'+obsid+'_'+cid+'.pars')>0:
                seds=[]
                for line in open('trimcatalog_'+obsid+'_'+cid+'.pars'):
                    if "SED" in line or "sky" in line:
                       seds.append(line.split()[5])
                uniqseds=list(set(seds))
                if len(seds)>0:
                    pfile=open('trimcatalog_'+obsid+'_'+cid+'_uniq.pars','w')
                    for s in uniqseds:
                        if s==uniqseds[0]:
                            pfile.write(os.path.join(sedDir,s))
                        else:
                            pfile.write(','+os.path.join(sedDir,s))
                    pfile.close()
                for ex in range(nexp):
                    eid="E%03d" % (ex)
                    fid=obsid+'_'+cid+'_'+eid
                    for ckpt in range(checkpoint+1):
                        fidckpt=fid+'_'+str(ckpt)
                        if os.path.exists('raytrace_'+fidckpt+'.pars'):
                            if len(seds)>0:
                                pfile=open('raytrace_'+fidckpt+'.pars','a')
                                pfile.write(open('trimcatalog_'+obsid+'_'+cid+'.pars').read())
                                pfile.close()
        else:
            sys.exit(1)

    f=os.path.join(workDir,'trim_'+obsid+'_'+tc+'.pars')
    if os.path.exists(f):
        os.remove(f)

def preraytrace(argv):
    observationID=argv[2]
    jobID=argv[3]
    cid=argv[4]
    scratchDir=os.path.join(os.getcwd(),'../scratch')

    if os.path.exists('raytrace_'+jobID+'.sub'):
        seds=os.path.join(scratchDir,'trimcatalog_'+observationID+'_'+cid+'_uniq.pars')
        if os.path.exists(seds):
            newsub=open('raytrace_'+jobID+'.sub.new','w')
            newsub.write(open('raytrace_'+jobID+'.sub').read().replace('segmentation.txt',open(seds).read()))
            newsub.close()
            shutil.move('raytrace_'+jobID+'.sub.new','raytrace_'+jobID+'.sub')
    else:
        sys.exit(1)

def postraytrace(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    workDir=argv[6]
    instrument=argv[7]
    scratchDir=os.path.join(os.getcwd(),'../scratch')
    fid=observationID+'_'+cid+'_'+eid

    eImage=os.path.join(scratchDir,instrument+'_e_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.fits.gz')
    if os.path.exists(eImage):
        if os.path.getsize(eImage)>0:
            for f in glob.glob(workDir+'/raytrace_'+fid+'*.pars') :
                os.remove(f)
            cleanupScreens(observationID,workDir)
        else:
            sys.exit(1)
    else:
        sys.exit(1)

def poste2adc(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    workDir=argv[6]
    instrument=argv[7]
    scratchDir=os.path.join(os.getcwd(),'../scratch')
    fid=observationID + '_' + cid + '_' + eid

    tarFile=os.path.join(scratchDir,instrument+'_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.tar')
    if os.path.exists(tarFile):
        if os.path.getsize(tarFile)>0:
            if os.path.exists(workDir+'/e2adc_'+fid+'.pars'):
                os.remove(workDir+'/e2adc_'+fid+'.pars')
            cleanupScreens(observationID,workDir)
        else:
            sys.exit(1)
    else:
        sys.exit(1)


function=sys.argv[1]
try:
    exec(function+'(sys.argv)')
except:
    raise RuntimeError('Invalid command %s ' % function)

