#!/usr/bin/env python

import sys, os, subprocess, shutil
import tarfile

def runProgram(command, binDir=None, argstring=None):
    myCommand = command
    if binDir is not None:
        myCommand = os.path.join(binDir, command)
    if argstring is not None:
        myCommand += argstring
    if subprocess.call(myCommand, shell=True) != 0:
        raise RuntimeError("Error running %s" % myCommand)

def posttrim(argv):
    obsid=argv[2]
    tc=argv[3]
    nexp=int(float(argv[4]))
    sedDir=argv[5]
    checkpoint=int(float(argv[6]))
    workDir=os.path.join(os.getcwd(),'../scratch')

    os.chdir(workDir)
    chipID=[]
    for line in open('trim_'+obsid+'_'+tc+'.pars'):
        if "chipid" in line:
            chipID.append(line.split()[2])

    for cid in chipID:
        if os.path.exists('trimcatalog_'+obsid+'_'+cid+'.pars'):
            if os.path.getsize('trimcatalog_'+obsid+'_'+cid+'.pars')>0:
                seds=[]
                for line in open('trimcatalog_'+obsid+'_'+cid+'.pars'):
                    if "SED" in line or "sky" in line:
                       seds.append(line.split()[5])
                uniqseds=list(set(seds))
                if len(seds)>0:
                    pfile=open('trimcatalog_'+obsid+'_'+cid+'_uniq.pars','w')
                    for s in uniqseds:
                        if s==uniqseds[0]:
                            pfile.write(os.path.join(sedDir,s))
                        else:
                            pfile.write(','+os.path.join(sedDir,s))
                    pfile.close()
                for ex in range(nexp):
                    eid="E%03d" % (ex)
                    fid=obsid+'_'+cid+'_'+eid
                    for ckpt in range(checkpoint+1):
                        fidckpt=fid+'_'+str(ckpt)
                        if os.path.exists('raytrace_'+fidckpt+'.pars'):
                            if len(seds)>0:
                                pfile=open('raytrace_'+fidckpt+'.pars','a')
                                pfile.write(open('trimcatalog_'+obsid+'_'+cid+'.pars').read())
                                pfile.close()
        else:
            sys.exit(1)

def preraytrace(argv):
    observationID=argv[2]
    jobID=argv[3]
    cid=argv[4]
    workDir=os.path.join(os.getcwd(),'../scratch')

    if os.path.exists('raytrace_'+jobID+'.sub'):
        seds=os.path.join(workDir,'trimcatalog_'+observationID+'_'+cid+'_uniq.pars')
        if os.path.exists(seds):
            newsub=open('raytrace_'+jobID+'.sub.new','w')
            newsub.write(open('raytrace_'+jobID+'.sub').read().replace('segmentation.txt',open(seds).read()))
            newsub.close()
            shutil.move('raytrace_'+jobID+'.sub.new','raytrace_'+jobID+'.sub')
    else:
        sys.exit(1)

def postraytrace(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    outputDir=argv[6]
    workDir=os.path.join(os.getcwd(),'../scratch')

    eImage=os.path.join(workDir,'lsst_e_'+observationID+'_'+cid+'_'+eid+'.fits.gz')
    eImageRename=os.path.join(outputDir,'lsst_e_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.fits.gz')
    if os.path.exists(eImage):
        shutil.move(eImage,eImageRename)
    else:
        sys.exit(1)

def poste2adc(argv):
    observationID=argv[2]
    filt=argv[3]
    cid=argv[4]
    eid=argv[5]
    outputDir=argv[6]
    instrDir=argv[7]
    workDir=os.path.join(os.getcwd(),'../scratch')

    os.chdir(workDir)
    tarFiles=''
    segfile=os.path.join(instrDir,'segmentation.txt')
    for line in open(segfile):
        aid=line.split()[0]
        if cid in line and aid != cid:
            rawImage='lsst_a_'+observationID+'_'+aid+'_'+eid+'.fits.gz'
            rawImageRename=outputDir+'/lsst_a_'+observationID+'_f'+filt+'_'+aid+'_'+eid+'.fits.gz'
            if os.path.exists(rawImage):
                shutil.move(rawImage,rawImageRename)
                tarFiles+=rawImageRename.split('/')[-1]+' '
            else:
                sys.exit(1)

    eImage='lsst_e_'+observationID+'_'+cid+'_'+eid+'.fits.gz'
    eImageRename=os.path.join(outputDir,'lsst_e_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.fits.gz')
    shutil.move(eImage,eImageRename)
    tarFiles+=(eImageRename.split('/')[-1])

    os.chdir(outputDir)
    tar='lsst_'+observationID+'_f'+filt+'_'+cid+'_'+eid+'.tar'
    runProgram('tar cf '+tar+' '+tarFiles+' --remove-files')


function=sys.argv[1]
try:
    exec(function+'(sys.argv)')
except:
    raise RuntimeError('Invalid command %s ' % function)

